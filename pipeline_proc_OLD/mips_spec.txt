--- MIPS BINARY CHEAT SHEET ---

We need to implement the following:
• arithmetic: add, addi, addu, sub, subu 
• logical: and, or, sll 
• data transfer: lw, sw 
• conditional branch: beq, bne, bgtz, slt, sltu


--- ARITHMETIC ---
add	ADD rd, rs, rt;		rd <-- rs + rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 0 0 0

addi	ADDI rt, rs, imm	rt <-- rs + imm
0 0 1 0 0 0 - rs[4:0] - rt[4:0] - imm[15:0]

addu	ADDU rd, rs, rt		rd <-- rs + rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 0 0 1


sub	SUB rd, rs, rt		rd <-- rs - rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 0 1 0

subu	SUBU rd, rs, rt		rd <-- rs - rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 0 1 1


--- LOGICAL ---
and	AND rd, rs, rt		rd <-- rs AND rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 1 0 0

or: 	OR rd, rs, rt;		rd <-- rs OR rt
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 0 1 0 1

sll: 	SLL rd, rt, sa; 	rd <-- rt << sa
0 0 0 0 0 0 - 0 0 0 0 0 - rt[4:0] - rd[4:0] - sa[4:0] - 0 0 0 0 0 0


--- DATA TRANSFER ---
lw: 	LW rt, offset(base); 	rt <-- Mem[base + offset]
1 0 0 0 1 1 - base[4:0] - rt[4:0] - offset[15:0]

sw: 	SW rt, offset(base); 	Mem[base + offset] <-- rt
1 0 1 0 1 1 - base[4:0] - rt[4:0] - offset[15:0]


--- CONDITIONAL BRANCH ---
beq: 	BEQ rs, rt, offset; 	if(rs = rt) then branch
0 0 0 1 0 0 - rs[4:0] - rt[4:0] - offset[15:0]

bne: 	BNE rs, rt, offset; 	if(rs != rt) then branch
0 0 0 1 0 1 - rs[4:0] - rt[4:0] - offset[15:0]

bgtz: 	BGTZ rs, offset; 	if(rs > 0) then branch -- !(ZF or Reg[rs][31])
0 0 0 1 1 1 - rs[4:0] - 0 0 0 0 0 - offset[15:0]

slt: 	SLT rd, rs, rt; 	rd <-- (rs < rt)
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 1 0 1 0

sltu: 	SLTU rd, rs, rt; 	rd <-- (rs < rt)
0 0 0 0 0 0 - rs[4:0] - rt[4:0] - rd[4:0] - 0 0 0 0 0 - 1 0 1 0 1 1







